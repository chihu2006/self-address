name: Fetch BINGCHA M3U via Proxy

on:
  schedule:
    - cron: "0 0 * * *"  # daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-m3u:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # === SOCKS5 ROUND ===
      - name: Download SOCKS5 proxies
        run: |
          echo "Fetching SOCKS5 proxies..."
          API_URL='https://api.proxyscrape.com/v4/free-proxy-list/get?request=display_proxies&protocol=socks5&proxy_format=ipport&format=text'
          curl -sS --max-time 40 "$API_URL" -o /tmp/proxies.txt || exit 1
          sed -i 's/\r$//' /tmp/proxies.txt
          grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$' /tmp/proxies.txt > /tmp/proxies.clean.txt || true
          mv /tmp/proxies.clean.txt /tmp/proxies.txt
          echo "Got $(wc -l < /tmp/proxies.txt) SOCKS5 proxies"

      - name: Set environment variables
        run: |
          echo "URL=https://fy.188766.xyz/?ip=192.168.1.2&proxy=true&lunbo=false&bconly=true" >> $GITHUB_ENV
          echo "OUTPUT=bingcha.m3u" >> $GITHUB_ENV

      - name: Fetch M3U via SOCKS5 proxies
        id: fetch_socks
        continue-on-error: true
        run: |
          echo "Starting SOCKS5 fetch..."
          success=false
          attempt=0
          max_attempts=50

          while read -r ipport && [ $attempt -lt $max_attempts ]; do
            [ -z "$ipport" ] && continue
            attempt=$((attempt+1))
            PROXY="socks5h://$ipport"
            echo "[$attempt] Trying proxy $PROXY"

            TMP="/tmp/resp"
            CURL_OUT=$(curl -sS -k -x "$PROXY" -L --max-redirs 5 --max-time 30 -A "curl/8.13.0" -w "%{http_code} %{content_type}" -o "$TMP" "$URL" 2>&1) || CURL_STATUS=$?
            CURL_STATUS=${CURL_STATUS:-0}
            HTTP_CODE=$(echo "$CURL_OUT" | awk '{print $1}')
            CONTENT_TYPE=$(echo "$CURL_OUT" | awk '{print $2}')

            if [ "$CURL_STATUS" -ne 0 ]; then
              echo "curl failed (exit $CURL_STATUS)"
              continue
            fi

            if [ ! -s "$TMP" ]; then
              echo "Empty response"
              continue
            fi

            if grep -q -m1 '^#EXTM3U' "$TMP" || grep -q -m1 'EXTINF' "$TMP"; then
              echo "✅ SOCKS5 success via $PROXY"
              mv "$TMP" "$OUTPUT"
              success=true
              break
            else
              echo "Not a valid M3U (HTTP $HTTP_CODE, CT=$CONTENT_TYPE)"
            fi
          done < /tmp/proxies.txt

          if [ "$success" = true ]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      # === HTTP FALLBACK ROUND ===
      - name: Download HTTP proxies
        if: steps.fetch_socks.outputs.success == 'false'
        run: |
          echo "Fetching HTTP proxies (fallback)..."
          API_URL='https://api.proxyscrape.com/v4/free-proxy-list/get?request=display_proxies&protocol=http&proxy_format=ipport&format=text'
          curl -sS --max-time 40 "$API_URL" -o /tmp/http_proxies.txt || exit 1
          sed -i 's/\r$//' /tmp/http_proxies.txt
          grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+$' /tmp/http_proxies.txt > /tmp/proxies.clean.txt || true
          mv /tmp/proxies.clean.txt /tmp/http_proxies.txt
          echo "Got $(wc -l < /tmp/http_proxies.txt) HTTP proxies"

      - name: Fetch M3U via HTTP proxies
        if: steps.fetch_socks.outputs.success == 'false'
        run: |
          echo "Starting HTTP proxy fallback..."
          success=false
          attempt=0
          max_attempts=50

          while read -r ipport && [ $attempt -lt $max_attempts ]; do
            [ -z "$ipport" ] && continue
            attempt=$((attempt+1))
            PROXY="http://$ipport"
            echo "[$attempt] Trying proxy $PROXY"

            TMP="/tmp/resp"
            CURL_OUT=$(curl -sS -k -x "$PROXY" -L --max-redirs 5 --max-time 30 -A "curl/8.13.0" -w "%{http_code} %{content_type}" -o "$TMP" "$URL" 2>&1) || CURL_STATUS=$?
            CURL_STATUS=${CURL_STATUS:-0}
            HTTP_CODE=$(echo "$CURL_OUT" | awk '{print $1}')
            CONTENT_TYPE=$(echo "$CURL_OUT" | awk '{print $2}')

            if [ "$CURL_STATUS" -ne 0 ]; then
              echo "curl failed (exit $CURL_STATUS)"
              continue
            fi

            if [ ! -s "$TMP" ]; then
              echo "Empty response"
              continue
            fi

            if grep -q -m1 '^#EXTM3U' "$TMP" || grep -q -m1 'EXTINF' "$TMP"; then
              echo "✅ HTTP proxy success via $PROXY"
              mv "$TMP" "$OUTPUT"
              success=true
              break
            else
              echo "Not a valid M3U (HTTP $HTTP_CODE, CT=$CONTENT_TYPE)"
            fi
          done < /tmp/http_proxies.txt

          if [ "$success" != true ]; then
            echo "❌ All HTTP proxies failed too."
            exit 1
          fi

      - name: Commit & push if updated
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add "$OUTPUT"
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update bingcha.m3u ($(date -u '+%Y-%m-%d %H:%M:%S UTC'))"
            git push origin HEAD:main
            echo "✅ bingcha.m3u updated successfully."
          fi
