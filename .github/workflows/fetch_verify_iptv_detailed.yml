name: Fetch & Verify IPTV M3U (Detailed)

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-and-verify-detailed:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        run: |
          echo "URL=https://freetv.fun/test_channels_banned_cn_new.m3u" >> $GITHUB_ENV
          echo "OUTPUT=rawaddress/freetv.m3u" >> $GITHUB_ENV
          echo "TEMP_FILE=rawaddress/test_channels.m3u" >> $GITHUB_ENV
          echo "CHANNEL_LIMIT=50" >> $GITHUB_ENV
          echo "FAILED_OUTPUT=rawaddress/failed_freetv.m3u" >> $GITHUB_ENV
          echo "LOG_FILE=rawaddress/verification_log.json" >> $GITHUB_ENV

      - name: Prepare folder
        run: mkdir -p rawaddress

      - name: Fetch M3U
        run: |
          curl -L -A "Chrome/140.0.0.0" -o "$OUTPUT" "$URL"
          if [ ! -s "$OUTPUT" ]; then
            echo "❌ Downloaded file is empty."
            exit 1
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq

      - name: Extract top N channels
        run: |
          echo "#EXTM3U" > "$TEMP_FILE"
          awk '/^#EXTINF/{print;getline;print}' "$OUTPUT" | head -n $((CHANNEL_LIMIT * 2)) >> "$TEMP_FILE"

      - name: Verify channels (detailed)
        run: |
          input="$TEMP_FILE"
          failed="$FAILED_OUTPUT"
          log="$LOG_FILE"
          : > "$failed"
          : > "$log"

          echo "[" > "$log"
          first=true

          # Extract only URLs (every 2nd line in M3U)
          awk 'NR % 2 == 0 {print}' "$input" | while read -r url; do
            start=$(date +%s%3N)

            # Timeout 10 seconds for ffprobe
            timeout 10 ffprobe -v error -select_streams v:0 -show_entries stream=codec_name,width,height -show_entries format=bit_rate -of default=nokey=1:noprint_wrappers=1 "$url" >/tmp/ffprobe_output.txt 2>/dev/null
            ret=$?

            end=$(date +%s%3N)
            duration=$((end - start))

            if [ $ret -eq 0 ]; then
              status="OK"
            else
              status="FAILED"
              echo "$url" >> "$failed"
            fi

            # Safely get codec info and bitrate
            codec=$(head -n 3 /tmp/ffprobe_output.txt | paste -s -d ',' - || echo "unknown")
            bitrate=$(tail -n 1 /tmp/ffprobe_output.txt || echo "unknown")

            # JSON formatting with printf
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> "$log"
            fi

            printf '{
  "url": "%s",
  "status": "%s",
  "response_time_ms": %d,
  "video_info": "%s",
  "bitrate": "%s"
}' "$url" "$status" "$duration" "$codec" "$bitrate" >> "$log"

            # Live progress
            echo "$status: $url ($duration ms, $codec, bitrate=$bitrate)"
          done

          echo "]" >> "$log"
