name: Fetch & Verify IPTV M3U (Detailed)

on:
  schedule:
    - cron: "0 0 * * *"  # daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch-and-verify-detailed:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Set variables
      - name: Set variables
        run: |
          echo "URL=https://freetv.fun/test_channels_banned_cn_new.m3u" >> $GITHUB_ENV
          echo "OUTPUT=rawaddress/freetv.m3u" >> $GITHUB_ENV
          echo "CHANNEL_LIMIT=50" >> $GITHUB_ENV
          echo "FAILED_OUTPUT=rawaddress/failed_freetv.m3u" >> $GITHUB_ENV
          echo "LOG_FILE=rawaddress/verification_log.json" >> $GITHUB_ENV
          echo "TEMP_FILE=rawaddress/test_channels.m3u" >> $GITHUB_ENV

      # 3. Prepare folder
      - name: Prepare folder
        run: mkdir -p rawaddress

      # 4. Fetch M3U
      - name: Fetch M3U via curl
        run: |
          for i in {1..5}; do
            curl -L -A "Chrome/140.0.0.0" -o "$OUTPUT" "$URL" && break
            sleep 5
          done
          if [ ! -s "$OUTPUT" ]; then
            echo "❌ Downloaded file is empty."
            exit 1
          fi
          echo "✅ M3U fetched."

      # 5. Install dependencies
      - name: Install ffmpeg & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq

      # 6. Extract top N channels
      - name: Extract top channels
        run: |
          echo "#EXTM3U" > "$TEMP_FILE"
          awk '/^#EXTINF/{print;getline;print}' "$OUTPUT" | head -n $((CHANNEL_LIMIT * 2)) >> "$TEMP_FILE"

      # 7. Detailed verification
      - name: Verify channels (detailed)
        run: |
          input="$TEMP_FILE"
          failed="$FAILED_OUTPUT"
          log="$LOG_FILE"
          : > "$failed"
          : > "$log"

          echo "[" > "$log"
          first=true

          grep '^http' "$input" | while read -r url; do
            start=$(date +%s%3N)  # milliseconds
            ffprobe -v error -show_streams -show_format "$url" -timeout 5000000 >/dev/null 2>&1
            ret=$?
            end=$(date +%s%3N)
            duration=$((end - start))

            if [ $ret -eq 0 ]; then
              status="OK"
            else
              status="FAILED"
              echo "$url" >> "$failed"
            fi

            # Get stream info safely
            codec=$(ffprobe -v error -select_streams v:0 -show_entries stream=codec_name,width,height -of default=nokey=1:noprint_wrappers=1 "$url" 2>/dev/null | paste -s -d ',' -)
            bitrate=$(ffprobe -v error -show_entries format=bit_rate -of default=nokey=1:noprint_wrappers=1 "$url" 2>/dev/null || echo "unknown")

            # Write JSON entry
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> "$log"
            fi

            echo "{
  \"url\": \"$url\",
  \"status\": \"$status\",
  \"response_time_ms\": $duration,
  \"video_info\": \"$codec\",
  \"bitrate\": \"$bitrate\"
}" >> "$log"

            # Also print live progress
            echo "$status: $url ($duration ms, $codec, bitrate=$bitrate)"
          done

          echo "]" >> "$log"
